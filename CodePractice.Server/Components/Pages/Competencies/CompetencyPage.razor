@page "/Competency/{Id:int}"
@using System.Security.Claims

@rendermode InteractiveServer
@inject ICompetenciesRepo repo
@inject ApplicationDbContext ApplicationDbContext

<h3>Competency</h3>
<h4>@Competency?.Title</h4>
<p>@((MarkupString)Competency.Description)</p>

<h5>Exercises</h5>
@if(exercise == null)
{
    <p>No exercises found</p>
}
else
{
    <a class="btn btn-primary" href="exercise/@exercise.Id">Try exercise</a>
}

@code {
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int Id { get; set; }
    public Competency? Competency { get; set; }
    private Exercise? exercise;
    private ApplicationUser? user = default!;   

    override protected void OnInitialized()
    {
        Competency = new Competency();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        Competency = repo.GetCompetency(Id);
        var authState = await authenticationState;
        user = await GetUser();

        if (user!= null)
        {
            exercise = repo.GetNextExercise(Competency, user);
        }
    }

    private async Task<ApplicationUser?> GetUser()
    {
        var userPrincipal = (await authenticationState).User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return ApplicationDbContext.Users.Where(u => u.Id == userid).FirstOrDefault();
        return null;
    }
}