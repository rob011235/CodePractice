@page "/Instructors"
@inject IHttpContextAccessor context
@inject IInstructorsRepo InstructorsRepo
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
<h3>InstructorsPage</h3>
<p> You are @name</p>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p> You are an Admin</p>
    </Authorized>
    <NotAuthorized>
        <p> You are not an Admin</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Instructor">
<Authorized>
        <p> You are an Instructor</p>
    </Authorized>
    <NotAuthorized>
        <p> You are not an Instructor</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        <p> You are logged in</p>
    </Authorized>
    <NotAuthorized>
        <p> You are not logged in</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    string name;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrator";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var claimsPrincipalFromContext = context.HttpContext.User;
        name = claimsPrincipalFromContext.Identity.Name;

        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        var user = await _UserManager.FindByNameAsync("rgarner011235@gmail.com");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current logged in user
        CurrentUser = (await AuthenticationStateTask).User;
    }
}
